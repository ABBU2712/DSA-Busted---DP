#Given a 2D integer matrix A of size N x M.

#From A[i][j] you can move to A[i+1][j], if A[i+1][j] > A[i][j], or can move to A[i][j+1] if A[i][j+1] > A[i][j].

#The task is to find and output the longest path length if we start from (0, 0).

#NOTE:

#If there doesn't exist a path return -1.

class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, A):
        dp = [[-1 for i in range(len(A[0]))] for j in range(len(A))]

        for i in range(len(A)):
            for j in range(len(A[0])):
                if i == j == 0:
                    dp[i][j] = 1
                    continue

                if j != 0 and A[i][j] > A[i][j-1] and dp[i][j-1] != -1:
                    dp[i][j] = dp[i][j-1] + 1
                if i != 0 and A[i][j] > A[i-1][j] and dp[i-1][j] != -1:
                    dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)
                    
        return dp[-1][-1]
